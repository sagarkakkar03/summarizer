import openai
import streamlit as st 

#Set Gpt_api_key
openai.api_key = st.secrets['secret2']
st.header('Summarizer')

article_text = st.text_area('Enter your text which you want to summarize')
output_size = st.radio(label ='What kind of output do you want?',
                       options = ['To-The-Point', "Concise", "Detailed"])
if output_size == 'To-The-Point':
    out_token = 50
elif output_size == 'Concise':
    out_token = 128
else:
    out_token =516
if len(article_text) > 100:
    temp = st.slider('temprature', 0.0, 1.0, 0.5)
    if st.button('Generate Summary'):
        # GPT-3 to generate a summary of the article
        response = openai.Completion.create(
            engine = 'text-davinci-003',
            prompt = 'please summarize this scientific article for me in a few sentences : ' + article_text,
            max_tokens = 516,
            temperature = temp,
        )
        # Completion class is an AI-powered text completion model that can generate text based on a prompt provided by the user.
        # the create() method of the Completion class is called with several parameters:
        # engine: This specifies the name of the OpenAI API engine to use for text generation.In this case , the text-davinci-003'engine is being used.This is a powerful language model that can generate high-quality text.
        # prompt: This is the text prompt that the Completion model will use to generate text. In this case, the prompt is a request to summarize the scientific aritcle in a few sentences. the text of the article is appended to the end of the prompt using string concatination
        # max_tokens: This specifies the maximum number of tokens (words or word pieces) that the Completion model should generate in its output. The value of this parameter is determined by the output size selected by the user(either 'To-The-Point','Concise',or'Detailed').
        # temperautre: This parameter that controls the randomness or creativity of the text generated by the Completion model. Avalue of 0.0 will generate the most predictable text, while a value of 1.0 will generate the most random text. In this case, a temprature of 0.5 is used , which will generate text that is somewhere in between predictable and random.
        res = response['choices'][0]['text']
        st.info(res)

        st.download_button("Download Result", res)
else:
    st.warning('The sentence is not long enough')

